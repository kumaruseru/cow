const Notification = require('../models/Notification');

/**
 * Helper functions ƒë·ªÉ t·∫°o notifications t·ª± ƒë·ªông
 */

// T·∫°o notification khi c√≥ tin nh·∫Øn m·ªõi
async function createMessageNotification(senderId, recipientId, messageContent) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'post_mention', // S·ª≠ d·ª•ng post_mention cho message v√¨ kh√¥ng c√≥ enum message
      message: `B·∫°n c√≥ tin nh·∫Øn m·ªõi: "${messageContent.substring(0, 50)}${messageContent.length > 50 ? '...' : ''}"`,
      data: {
        messageId: messageContent.id || null,
        conversationId: `${senderId}_${recipientId}`,
        preview: messageContent.substring(0, 100)
      }
    });
    
    await notification.save();
    console.log('üìß Created message notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating message notification:', error);
    return null;
  }
}

// T·∫°o notification khi c√≥ l·ªùi m·ªùi k·∫øt b·∫°n
async function createFriendRequestNotification(senderId, recipientId) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'friend_request',
      message: 'B·∫°n c√≥ l·ªùi m·ªùi k·∫øt b·∫°n m·ªõi',
      data: {
        requestId: `${senderId}_${recipientId}`,
        status: 'pending'
      }
    });
    
    await notification.save();
    console.log('üë• Created friend request notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating friend request notification:', error);
    return null;
  }
}

// T·∫°o notification khi ch·∫•p nh·∫≠n k·∫øt b·∫°n
async function createFriendAcceptNotification(senderId, recipientId) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'friend_accept',
      message: 'L·ªùi m·ªùi k·∫øt b·∫°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
      data: {
        requestId: `${recipientId}_${senderId}`,
        status: 'accepted'
      }
    });
    
    await notification.save();
    console.log('‚úÖ Created friend accept notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating friend accept notification:', error);
    return null;
  }
}

// T·∫°o notification khi c√≥ follow m·ªõi
async function createFollowNotification(senderId, recipientId) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'follow',
      message: 'B·∫°n c√≥ ng∆∞·ªùi theo d√µi m·ªõi',
      data: {
        followId: `${senderId}_${recipientId}`,
        timestamp: new Date()
      }
    });
    
    await notification.save();
    console.log('üë§ Created follow notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating follow notification:', error);
    return null;
  }
}

// T·∫°o notification khi c√≥ like m·ªõi
async function createLikeNotification(senderId, recipientId, postId) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'like',
      message: 'B√†i vi·∫øt c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c th√≠ch',
      relatedPost: postId,
      data: {
        postId: postId,
        likeId: `${senderId}_${postId}`,
        timestamp: new Date()
      }
    });
    
    await notification.save();
    console.log('‚ù§Ô∏è Created like notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating like notification:', error);
    return null;
  }
}

// T·∫°o notification khi c√≥ comment m·ªõi
async function createCommentNotification(senderId, recipientId, postId, commentContent) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'comment',
      message: `B√†i vi·∫øt c·ªßa b·∫°n c√≥ b√¨nh lu·∫≠n m·ªõi: "${commentContent.substring(0, 50)}${commentContent.length > 50 ? '...' : ''}"`,
      relatedPost: postId,
      data: {
        postId: postId,
        commentId: `${senderId}_${postId}_${Date.now()}`,
        commentPreview: commentContent.substring(0, 100),
        timestamp: new Date()
      }
    });
    
    await notification.save();
    console.log('üí¨ Created comment notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating comment notification:', error);
    return null;
  }
}

// T·∫°o notification cho mention trong post
async function createMentionNotification(senderId, recipientId, postId, content) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: 'post_mention',
      message: `B·∫°n ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn trong m·ªôt b√†i vi·∫øt: "${content.substring(0, 50)}${content.length > 50 ? '...' : ''}"`,
      relatedPost: postId,
      data: {
        postId: postId,
        mentionId: `${senderId}_${postId}_${recipientId}`,
        contentPreview: content.substring(0, 100),
        timestamp: new Date()
      }
    });
    
    await notification.save();
    console.log('üè∑Ô∏è Created mention notification:', notification._id);
    return notification;
  } catch (error) {
    console.error('‚ùå Error creating mention notification:', error);
    return null;
  }
}

// H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o notification chung
async function createNotification(type, senderId, recipientId, message, data = {}) {
  try {
    const notification = new Notification({
      recipient: recipientId,
      sender: senderId,
      type: type,
      message: message,
      data: data
    });
    
    await notification.save();
    console.log(`üîî Created ${type} notification:`, notification._id);
    return notification;
  } catch (error) {
    console.error(`‚ùå Error creating ${type} notification:`, error);
    return null;
  }
}

// Export t·∫•t c·∫£ functions
module.exports = {
  createMessageNotification,
  createFriendRequestNotification,
  createFriendAcceptNotification,
  createFollowNotification,
  createLikeNotification,
  createCommentNotification,
  createMentionNotification,
  createNotification
};
