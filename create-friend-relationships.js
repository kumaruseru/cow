const mongoose = require('mongoose');
const Friend = require('./models/Friend');
const SimpleUser = require('./models/SimpleUser');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/cow_social_network').then(async () => {
  console.log('üì¶ MongoDB connected for creating friend relationships');
  
  try {
    // L·∫•y t·∫•t c·∫£ users
    const users = await SimpleUser.find().select('_id email firstName lastName');
    console.log('üë• Found users:', users.map(u => ({ id: u._id, email: u.email })));
    
    if (users.length < 2) {
      console.log('‚ùå Need at least 2 users to create friendships');
      return;
    }
    
    // X√≥a t·∫•t c·∫£ friend relationships c≈©
    await Friend.deleteMany({});
    console.log('üóëÔ∏è Cleared all existing friendships');
    
    // T·∫°o friendships m·∫´u
    const friendships = [];
    
    // T·∫°o k·∫øt b·∫°n gi·ªØa user ƒë·∫ßu ti√™n v√† th·ª© hai
    if (users.length >= 2) {
      friendships.push({
        requester: users[0]._id,
        recipient: users[1]._id,
        status: 'accepted',
        requestedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 ng√†y tr∆∞·ªõc
        acceptedAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000)   // 6 ng√†y tr∆∞·ªõc
      });
    }
    
    // N·∫øu c√≥ user th·ª© 3, t·∫°o pending request
    if (users.length >= 3) {
      friendships.push({
        requester: users[2]._id,
        recipient: users[0]._id,
        status: 'pending',
        requestedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 ng√†y tr∆∞·ªõc
      });
    }
    
    // N·∫øu c√≥ user th·ª© 4, t·∫°o th√™m accepted friendship
    if (users.length >= 4) {
      friendships.push({
        requester: users[1]._id,
        recipient: users[3]._id,
        status: 'accepted',
        requestedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 ng√†y tr∆∞·ªõc
        acceptedAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000)   // 4 ng√†y tr∆∞·ªõc
      });
    }
    
    // L∆∞u friendships
    if (friendships.length > 0) {
      const createdFriendships = await Friend.insertMany(friendships);
      console.log(`‚úÖ Created ${createdFriendships.length} friendships`);
    }
    
    // Hi·ªÉn th·ªã th·ªëng k√™
    const totalFriendships = await Friend.countDocuments();
    const acceptedFriendships = await Friend.countDocuments({ status: 'accepted' });
    const pendingRequests = await Friend.countDocuments({ status: 'pending' });
    
    console.log(`üìä Total friendships: ${totalFriendships}`);
    console.log(`üìä Accepted friendships: ${acceptedFriendships}`);
    console.log(`üìä Pending requests: ${pendingRequests}`);
    
    // Hi·ªÉn th·ªã chi ti·∫øt friendships
    const allFriendships = await Friend.find()
      .populate('requester', 'email firstName lastName')
      .populate('recipient', 'email firstName lastName')
      .sort({ createdAt: -1 });
    
    console.log('\nüë• Friend relationships:');
    allFriendships.forEach((friendship, index) => {
      const requesterName = friendship.requester ? 
        (friendship.requester.firstName || friendship.requester.email) : 'Unknown';
      const recipientName = friendship.recipient ? 
        (friendship.recipient.firstName || friendship.recipient.email) : 'Unknown';
      
      console.log(`${index + 1}. ${requesterName} ‚Üí ${recipientName} (${friendship.status})`);
    });
    
    // Test getFriends method cho user ƒë·∫ßu ti√™n
    if (users.length > 0) {
      console.log(`\nüîç Testing getFriends for ${users[0].email}:`);
      const friends = await Friend.getFriends(users[0]._id);
      friends.forEach(friendship => {
        const friend = friendship.requester._id.toString() === users[0]._id.toString() 
          ? friendship.recipient 
          : friendship.requester;
        const friendName = friend.firstName || friend.email;
        console.log(`  - Friend: ${friendName}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error creating friend relationships:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå Database connection closed');
  }
}).catch(err => {
  console.error('‚ùå MongoDB connection error:', err);
});
