const mongoose = require('mongoose');
const User = require('./models/SimpleUser');
const Post = require('./models/Post');

async function addMoreRecentPosts() {
  try {
    await mongoose.connect('mongodb://localhost:27017/cow_social_network');
    console.log('üì¶ Connected to MongoDB');

    // Get existing users
    const users = await User.find({}).limit(5);
    if (users.length === 0) {
      console.log('‚ùå No users found');
      return;
    }

    console.log(`üë§ Found ${users.length} users`);

    // Create more recent posts (today and yesterday)
    const now = new Date();
    const recentPosts = [
      {
        content: 'H√¥m nay coding v·ªõi #JavaScript v√† #ReactJS th·∫≠t l√† vui! #CongNghe #WebDev',
        hoursAgo: 2 // 2 hours ago
      },
      {
        content: 'ƒêang h·ªçc #TinTuc v·ªÅ AI m·ªõi nh·∫•t! #AI #MachineLearning #Tech #CongNghe',
        hoursAgo: 5 // 5 hours ago
      },
      {
        content: 'Cu·ªëi tu·∫ßn ƒëi #DuLich c√πng b·∫°n b√®! #Travel #Weekend #GiaiTri #Summer',
        hoursAgo: 8 // 8 hours ago
      },
      {
        content: 'Th·∫•y #CowSocialNetwork ng√†y c√†ng t·ªët h∆°n! #Social #Networking #SinhVien',
        hoursAgo: 12 // 12 hours ago
      },
      {
        content: '√în b√†i thi #SinhVien stress qu√°! #University #Study #Exams #HocTap',
        hoursAgo: 18 // 18 hours ago
      },
      {
        content: 'Netflix c√≥ phim m·ªõi hay! #GiaiTri #Movies #Entertainment #Netflix',
        hoursAgo: 20 // 20 hours ago
      },
      {
        content: 'Workshop #CongNghe h√¥m nay r·∫•t b·ªï √≠ch! #Tech #Programming #Developer',
        hoursAgo: 1 // 1 hour ago - very recent
      },
      {
        content: 'Hot #TinTuc: Meta ra m·∫Øt AI m·ªõi! #AI #Tech #News #CongNghe',
        hoursAgo: 3 // 3 hours ago
      }
    ];

    let createdCount = 0;

    for (let i = 0; i < recentPosts.length; i++) {
      const postData = recentPosts[i];
      const randomUser = users[Math.floor(Math.random() * users.length)];
      
      // Create posts with recent timestamps
      const createdAt = new Date(now - (postData.hoursAgo * 60 * 60 * 1000));

      const post = new Post({
        content: postData.content,
        author: randomUser._id,
        privacy: 'public',
        createdAt: createdAt,
        updatedAt: createdAt
      });

      // Add some random likes and comments for engagement
      const likeCount = Math.floor(Math.random() * 15) + 5; // 5-19 likes
      for (let j = 0; j < likeCount; j++) {
        const randomLiker = users[Math.floor(Math.random() * users.length)];
        if (!post.likes.some(like => like.user.toString() === randomLiker._id.toString())) {
          post.likes.push({
            user: randomLiker._id,
            createdAt: new Date(createdAt.getTime() + Math.random() * 2 * 60 * 60 * 1000) // within 2 hours after post
          });
        }
      }

      // Add more comments for recent posts
      const commentCount = Math.floor(Math.random() * 8) + 2; // 2-9 comments
      const sampleComments = [
        'ƒê·ªìng √Ω v·ªõi b·∫°n!',
        'Hay qu√°!',
        'M√¨nh c≈©ng nghƒ© v·∫≠y!',
        'Th√¥ng tin b·ªï √≠ch!',
        'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!',
        'Tuy·ªát v·ªùi!',
        'Ch√≠nh x√°c!',
        'Hay l·∫Øm!',
        'M√¨nh c≈©ng ƒëang h·ªçc c√°i n√†y!',
        'B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m kh√¥ng?'
      ];

      for (let k = 0; k < commentCount; k++) {
        const randomCommenter = users[Math.floor(Math.random() * users.length)];
        const randomComment = sampleComments[Math.floor(Math.random() * sampleComments.length)];
        
        post.comments.push({
          user: randomCommenter._id,
          content: randomComment,
          createdAt: new Date(createdAt.getTime() + Math.random() * 3 * 60 * 60 * 1000) // within 3 hours after post
        });
      }

      await post.save();
      createdCount++;
      console.log(`‚úÖ Created recent post ${createdCount}: "${postData.content.substring(0, 60)}..." (${postData.hoursAgo}h ago)`);
    }

    console.log(`\nüéâ Successfully created ${createdCount} recent posts with high engagement!`);
    
    // Show updated stats
    const totalPosts = await Post.countDocuments({});
    const recentPostCount = await Post.countDocuments({
      createdAt: { $gte: new Date(now - 24 * 60 * 60 * 1000) }
    });

    console.log(`üìä Stats:`);
    console.log(`   Total posts: ${totalPosts}`);
    console.log(`   Recent posts (24h): ${recentPostCount}`);

  } catch (error) {
    console.error('‚ùå Error creating recent posts:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üì¶ Disconnected from MongoDB');
  }
}

addMoreRecentPosts();
